version: "3.8"

services:
  migrations:
    build:
      context: .
      dockerfile: Dockerfile.migrate
    image: todo-api-migrate:latest
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - DB_NAME=${DB_NAME:-todo_db}
      - ENV=production
    depends_on:
      postgres:
        condition: service_healthy
    restart: "no"
    networks:
      - todo-network

  app:
    build:
      context: .
      dockerfile: Dockerfile.prod
    image: todo-api:latest
    ports:
      - "8080:8080"
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - DB_NAME=${DB_NAME:-todo_db}
      - JWT_SECRET=${JWT_SECRET}
      - ENV=production
      - LOG_LEVEL=info
      - LOG_FORMAT=json
    depends_on:
      migrations:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
    restart: always
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 512M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - todo-network

  postgres:
    image: postgres:16-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres}
      - POSTGRES_DB=${DB_NAME:-todo_db}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - todo-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 1G
    restart: always

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.prod.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/prometheus/rules:/etc/prometheus/rules:ro
      - prometheus-data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--storage.tsdb.retention.time=15d"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--web.enable-lifecycle"
      - "--web.external-url=https://todo.shiro.fit/prometheus"
    restart: always
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512M
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - todo-network

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3003:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel,grafana-clock-panel
      - GF_SERVER_ROOT_URL=https://grafana.shiro.fit
      - GF_SERVER_SERVE_FROM_SUB_PATH=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    restart: always
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 256M
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - prometheus
    networks:
      - todo-network

  alertmanager:
    image: prom/alertmanager:latest
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager-data:/alertmanager
    command:
      - "--config.file=/etc/alertmanager/alertmanager.yml"
      - "--storage.path=/alertmanager"
    restart: always
    deploy:
      resources:
        limits:
          cpus: "0.2"
          memory: 128M
    networks:
      - todo-network

  node-exporter:
    image: prom/node-exporter:latest
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - "--path.procfs=/host/proc"
      - "--path.sysfs=/host/sys"
      - "--path.rootfs=/rootfs"
      - "--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)"
    restart: always
    deploy:
      resources:
        limits:
          cpus: "0.1"
          memory: 64M
    networks:
      - todo-network

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    ports:
      - "8081:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    restart: always
    deploy:
      resources:
        limits:
          cpus: "0.2"
          memory: 128M
    networks:
      - todo-network

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    ports:
      - "9187:9187"
    environment:
      - DATA_SOURCE_NAME=postgresql://${DB_USER:-postgres}:${DB_PASSWORD:-postgres}@postgres:5432/${DB_NAME:-todo_db}?sslmode=disable
    restart: always
    deploy:
      resources:
        limits:
          cpus: "0.1"
          memory: 64M
    depends_on:
      - postgres
    networks:
      - todo-network

  nginx-exporter:
    image: nginx/nginx-prometheus-exporter:latest
    ports:
      - "9113:9113"
    command:
      - "-nginx.scrape-uri=http://nginx:8080/stub_status"
    restart: always
    deploy:
      resources:
        limits:
          cpus: "0.1"
          memory: 64M
    depends_on:
      - nginx
    networks:
      - todo-network

  todo-client:
    build:
      context: ./app/todo-client
      dockerfile: Dockerfile
    image: todo-client:latest
    ports:
      - "3333:3333"
    volumes:
      - /var/www/todo-client/static:/app/.next/static/
    environment:
      - API_URL=https://todo.shiro.fit/api/v1
      - NEXT_PUBLIC_API_URL=https://todo.shiro.fit/api/v1
    restart: always
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 256M
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:3333/"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - todo-network

  nginx:
    image: nginx:alpine
    ports:
      - "4080:80"
      - "4443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - /var/www/todo-client/static:/var/www/todo-client/static
    depends_on:
      - app
      - prometheus
      - grafana
      - alertmanager
      - todo-client
    restart: always
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 128M
    networks:
      - todo-network

networks:
  todo-network:
    driver: bridge

volumes:
  postgres-data:
  prometheus-data:
  grafana-data:
  alertmanager-data:
